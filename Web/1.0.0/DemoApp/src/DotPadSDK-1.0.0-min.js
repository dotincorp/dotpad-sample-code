class DotPadSample{static SAMPLE1="000220...";static SAMPLE2="000000...";static SAMPLE3="35"}class DotPadSDK{constructor(){this.DOTPAD_PREFIX="DotPad",this.DOTPAD_SERVICE="49535343-fe7d-4ae5-8fa9-9fafd205e455",this.DOTPAD_CHARACTERISTIC="49535343-1e4d-4bd9-ba61-23c647249616",this.devicesMap=new Map}async request(){const t={filters:[{namePrefix:this.DOTPAD_PREFIX}],optionalServices:[this.DOTPAD_SERVICE]};return await navigator.bluetooth.requestDevice(t)}async connect(t){if(!t)throw new Error("No Bluetooth device selected");const e=await t.gatt.connect(),a=await t.gatt.getPrimaryService(this.DOTPAD_SERVICE),o=await a.getCharacteristic(this.DOTPAD_CHARACTERISTIC),s=e.device.name;return this.devicesMap.set(s,{service:a,characteristic:o}),console.log(`* dotpad connected => ${e.connected}`),console.log(`* dotpad device name => ${s}`),e.connected}async disconnect(t){return this.devicesMap.has(t)&&this.devicesMap.delete(t),t.gatt.disconnect()}async print(t,e,a){console.log(t);const o=this.devicesMap.get(t.name);if(o&&o.characteristic){let t=[];"graphic"===a?t=DotPadData.getGraphicData(e):"text"===a&&(t=DotPadData.getTextData(e));for(let e of t)await o.characteristic.writeValue(e)}else console.error("Device is not connected or characteristic not found")}async addListenerNotification(t,e){if(!t)throw new Error("No Bluetooth device connected");const a=this.devicesMap.get(t.name);a.characteristic.startNotifications().then((()=>{console.log("> Notifications started"),a.characteristic.addEventListener("characteristicvaluechanged",e)}))}}class DotPadData{static getGraphicData(t){return this._getRequestData(t,!1)}static getTextData(t){return this._getRequestData(t,!0)}static getGraphicResetData(){return this._getRequestData(this._getResetData(300),!0)}static getTextResetData(){return this._getRequestData(this._getResetData(20),!1)}static _getResetData(t){return Array(t).fill("00").join()}static _getRequestData(t,e){const a=DotDataUtil.hexToBytes(t),o=[],s=this._getRequestDataChunkList(a,30);return this._addCommandChunk(o,s,e),o}static _getRequestDataChunkList(t,e){const a=[],o=t.length;for(let s=0;s<o;s+=e){const r=s+e,c=t.slice(s,r>o?o:r);a.push(c)}return a}static _addCommandChunk(t,e,a){let o=1;for(const s of e){const e=[...DotPadProtocol.getSync(),...DotPadProtocol.getLength(s),...DotPadProtocol.getDestId(o++),...DotPadProtocol.getCommandType(),...DotPadProtocol.getDisplayMode(a),...DotPadProtocol.getStartCell(),...DotPadProtocol.getDataBody(s),DotPadProtocol.getCheckSum(DotPadProtocol.getDestId(o-1),DotPadProtocol.getCommandType(),DotPadProtocol.getDisplayMode(a),DotPadProtocol.getStartCell(),DotPadProtocol.getDataBody(s))];t.push(DotDataUtil.hexToBytes(e.join("")))}}}class DotPadProtocol{static getSync(){return["AA","55"]}static getLength(t){return["00",DotDataUtil.decimalToHex(t.length+6)]}static getDestId(t){return[DotDataUtil.decimalToHex(t)]}static getCommandType(){return["02","00"]}static getDisplayMode(t){return t?["80"]:["00"]}static getStartCell(){return["00"]}static getDataBody(t){return DotDataUtil.bytesToHexList(t)}static getCheckSum(t,e,a,o,s){const r=[...t,...e,...a,...o,...s];let c=165;for(const t of r)c^=parseInt(t,16);return DotDataUtil.decimalToHex(c)}}class DotDataUtil{static bytesToHex(t){return Array.from(t,(t=>t.toString(16).padStart(2,"0"))).join("")}static bytesToHexList(t){return Array.from(t,(t=>t.toString(16).padStart(2,"0")))}static decimalToHex(t){return t.toString(16).padStart(2,"0")}static hexToBytes(t){if(t.length%2!=0)throw new Error("Odd number of hex digits");const e=t.length/2,a=new Uint8Array(e);for(let o=0;o<e;o++){const e=parseInt(t.substring(2*o,2*o+2),16);if(isNaN(e))throw new Error("Expected hex string");a[o]=e}return a}}export{DotPadSDK,DotPadData,DotPadSample};